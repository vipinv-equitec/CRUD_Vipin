@model PagedList.IPagedList<CRUDWithDapper.Models.Student>
@using PagedList.Mvc;

@{
    ViewBag.Title = "GetAllStudents";
}

<p> @Html.ActionLink("Download Excel", "DownloadExcel", null, new { @class = "btn btn-primary" })</p>


<div class="d-flex">
    <div style="width:62%"><h2>All Students Details</h2></div>
    <div class="d-flex justify-content-end m-2 input-group">
        <div class="form-group me-2">
            <input type="text" id="searchInput" class="form-control" placeholder="Search">
        </div>
        <div class="form-group">
            <button class="btn btn-primary" type="button">Search</button>
        </div>
        <div class="form-group" style="margin-left:5px">
            @using (Html.BeginForm("GetAllStudents", "Student", FormMethod.Get))
            {
                @Html.DropDownList("pageSize", new List<SelectListItem>
                {
                    new SelectListItem { Text = "5", Value = "5" },
                    new SelectListItem { Text = "10", Value = "10" },
                    new SelectListItem { Text = "15", Value = "15" }
                }, new { @class = "form-select", onchange = "this.form.submit();" })
            }
        </div>
    </div>
</div>

<table class="table table-striped table-bordered text-center" id="myStudent">
    <tr>
        <th>
            @* @Html.DisplayNameFor(model => model.StudName)*@
            StudentName
        </th>
        <th>
            @* @Html.DisplayNameFor(model => model.StudAge)*@
            Age
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.StudEmail)*@
            StudentEmail
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.StudDepartment)*@
            Department
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.Skills)*@
            Skills
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StudName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StudAge)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StudEmail)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StudDepartment)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Skills)
            </td>
            <td class="text-center">
                @* @Html.ActionLink("Edit", "UpdateStudent", new { id = item.StudentId }, new { @class = "btn btn-warning btn-sm" })*@
                <a href="@Url.Action("UpdateStudent", new { id = item.StudentId })" class="btn btn-warning btn-sm" style="text-decoration: none;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                    </svg>
                </a>
                @*@Html.ActionLink("Details", "DetailStudent", new { id = item.StudentId }, new { @class = "btn btn-info btn-sm" })*@
                <a href="@Url.Action("DetailStudent", new { id = item.StudentId })" class="btn btn-info btn-sm" style="text-decoration: none;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
                    </svg>
                </a>
               @* @Html.ActionLink("Delete", "DeleteSoft", new { id = item.StudentId }, new { @class = "btn btn-danger btn-sm" })*@
                <a href="@Url.Action("DeleteSoft", new { id = item.StudentId })" class="btn btn-danger btn-sm" style="text-decoration: none;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                    </svg>
                </a>
            </td>
        </tr>
    }
</table>
<div class=" text-center">
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    <div class="">
        @for (int i = 1; i <= Model.PageCount; i++)
        {
            <button class="btn btn-primary @(Model.PageNumber == i ? "active" : "")"
                    onclick="location.href='@Url.Action("GetAllStudents", new { page = i, pageSize = Model.PageSize })'">
                @i
            </button>
        }
    </div>

</div>
<p>
    @Html.ActionLink("Create New", "AddStudent", null, new { @class = "btn btn-primary" })
    @Html.ActionLink("Deleted Student", "RestoreStudent", null, new { @class = "btn btn-primary" })
</p>
<div class="col-md-12 text-center"><button type="button" class="btn btn-danger" onclick="PrintData()">print</button></div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var searchInput = document.getElementById('searchInput');
        var table = document.getElementById('myStudent');
        var rows = table.getElementsByTagName('tr');

        searchInput.addEventListener('input', function () {
            var filter = searchInput.value.toLowerCase();

            for (var i = 1; i < rows.length; i++) {
                var row = rows[i];
                var text = row.textContent.toLowerCase();

                row.style.display = text.indexOf(filter) > -1 ? '' : 'none';
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        var table = document.getElementById('myStudent');
        var headers = table.getElementsByTagName('th');

        for (var i = 0; i < headers.length; i++) {
            headers[i].addEventListener('click', function () {
                sortTable(this.cellIndex);
            });
        }

        function sortTable(columnIndex) {
            var rows, switching, i, x, y, switchTO, dir, switchcount = 0;
            switching = true;
            dir = "asc";

            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    switchTO = false;

                    x = rows[i].getElementsByTagName("td")[columnIndex];
                    y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            switchTO = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            switchTO = true;
                            break;
                        }
                    }
                }

                if (switchTO) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    });
   /* document.addEventListener('DOMContentLoaded', function () {
        var table = document.getElementById('myStudent');
        var headers = table.getElementsByTagName('th');

        for (var i = 0; i < headers.length; i++) {
            headers[i].addEventListener('click', function () {
                sortTable(this);
            });
        }

        function sortTable(clickedHeader) {
            var columnIndex = clickedHeader.cellIndex;
            var rows, switching, i, x, y, switchTO, dir, switchcount = 0;
            switching = true;
            dir = clickedHeader.getAttribute('data-sort') === 'asc' ? 'desc' : 'asc';

            // Reset arrow signs in all headers
            for (var i = 0; i < headers.length; i++) {
                headers[i].innerHTML = headers[i].textContent;
                headers[i].removeAttribute('data-sort');
            }

            // Create a new arrow element and set the arrow sign based on sorting direction
            var arrow = document.createElement('span');
            arrow.innerHTML = dir === "asc" ? "&#9650;" : "&#9660;";
            arrow.className = 'arrow';
            clickedHeader.appendChild(arrow);
            clickedHeader.setAttribute('data-sort', dir);

            while (switching) {
                switching = false;
                rows = table.rows;

                for (i = 1; i < (rows.length - 1); i++) {
                    switchTO = false;

                    x = rows[i].getElementsByTagName("td")[columnIndex];
                    y = rows[i + 1].getElementsByTagName("td")[columnIndex];

                    if (dir === "asc" ? x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase() : x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        switchTO = true;
                        break;
                    }
                }

                if (switchTO) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount === 0 && dir === "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    });*/

    function PrintData() {
        var printWindow = window.open('@Url.Action("PrintData", "Student")', '_blank');
        printWindow.print();
    }
</script>
